{
  "name": "sequelize-fixtures",
  "version": "0.1.0",
  "description": "sequelize fixture loader",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha tests/test.js"
  },
  "engines": {
    "node": "*"
  },
  "keywords": [
    "sequelize",
    "fixtures"
  ],
  "dependencies": {
    "js-yaml": "~2.1.0",
    "glob": "~3.2.1",
    "q": "~0.9.6"
  },
  "devDependencies": {
    "sequelize-sqlite": "*",
    "mocha": "*",
    "should": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/domasx2/sequelize-fixtures.git"
  },
  "bugs": {
    "url": "https://github.com/domasx2/sequelize-fixtures/issues"
  },
  "author": {
    "name": "Domas Lapinskas",
    "email": "domasx2@gmail.com"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "readme": "Sequelize fixtures\n==========================================\n\nThis is a simple lib to load data to database using sequelize.  \nIt is intended for easily setting up test data.  \nYaml and json formats are supported. Includes a grunt task.  \n\nfindOrCreate is used to create records, so no record duplication when identical fixtures are defined or loaded multiple times.\n\n### Install\n    \n    npm install sequelize-fixtures\n\n### Test\n    \n    npm test\n\n### Usage\n\n```javascript\n    var sequelize_fixtures = require('sequelize-fixtures'),\n        models = {\n            Foo: require('./models/Foo')\n        };\n\n    //from file\n    sequelize_fixtures.loadFile('fixtures/test_data.json', models, function(){\n        doStuffAfterLoad();\n    });\n\n    //can use glob syntax to select multiple files\n    sequelize_fixtures.loadFile('fixtures/*.json', models, function(){\n        doStuffAfterLoad();\n    });\n\n    //array of files\n    sequelize_fixtures.loadFiles(['fixtures/users.json', 'fixtures/data*.json'], models, function(){\n        doStuffAfterLoad();\n    };\n\n    //specify file encoding (default utf8)\n    sequelize_fixtures.loadFile('fixtures/*.json', models, { encoding: 'windows-1257'}, function(){\n        doStuffAfterLoad();\n    });\n\n    //from array\n    var fixtures = [\n        {\n            model: 'Foo',\n            data: {\n                propA: 'bar',\n                propB: 1\n            }\n        },\n        {\n            model: 'Foo',\n            data: {\n                propA: 'baz',\n                propB: 3\n            }\n        }\n    ]\n    sequelize_fixtures.loadFixtures(fixtures, models, function(err){\n        doStuffAfterLoad();\n    });\n```\n\n### File formats\n\n#### json\n\n```json\n    [\n        {\n            \"model\": \"Foo\",\n            \"data\": {\n                \"propA\": \"bar\",\n                \"propB\": 1\n            }\n        },\n        {\n            \"model\": \"Foo\",\n            \"data\": {\n                \"propA\": \"baz\",\n                \"propB\": 3\n            }\n        }\n    ]\n```\n\n#### yaml\n\n```yaml\n    fixtures:\n        - model: Foo\n          data:\n            propA: bar\n            propB: 1\n        - model: Foo\n          data:\n            propA: baz\n            propB: 3\n```\n\n### Natural Keys  \n\nTo not have to specify id  field when describing associated records, you can use 'natural keys'. Or in the context of sequelize, essentially a 'where' clause to be used to retrieve the association via AssociatedModel.find :)  \nOnly BelongsTo is supported for the moment.\n\nAssuming `Bar.belongsTo(Foo)`:\n```json\n[\n    {\n        model: 'Foo',\n        data: {\n            uniqueProp: 'FOO1',\n            uniqueProp2: 1,\n            propA: 'baz'\n        }\n    },\n    {\n        model: 'Bar',\n        data: {\n            propA: 'something',\n            foos: {\n                uniqueProp: 'FOO1', \n                uniqueProp2: 1\n            }\n        }\n    }\n]\n```\n\n# grunt task\n\nGruntfile.js:\n\n```javascript\n    grunt.initConfig({\n        fixtures: {\n            test_data: {\n                files: ['fixtures/data1.json', 'fixtures/data2.json'], //list of files\n                models: require('../models')  //object Model name: model\n            },\n            test_data2: {\n                file: 'fixtures/data*.json', //one file\n                models: '../models' //string will be require()'d when task is run\n            },\n            test_data3: {\n                file: 'fixtures/*',\n                models: function () {  //function will be evaluated for models object\n                    return require('./models');\n                },\n                options: { //specify encoding\n                    encoding: 'windows-1257'\n                }\n            }\n        }\n\n    });\n\n    grunt.loadNpmTasks('sequelize-fixtures');\n```\n# TODO\n\nUtility for dumpiong data into fixtures",
  "homepage": "https://github.com/domasx2/sequelize-fixtures",
  "_id": "sequelize-fixtures@0.1.0",
  "dist": {
    "shasum": "c960432f08e7f103b052883c17e7bb2915a17dbb"
  },
  "_from": "sequelize-fixtures@~0.1.0",
  "_resolved": "https://registry.npmjs.org/sequelize-fixtures/-/sequelize-fixtures-0.1.0.tgz"
}
